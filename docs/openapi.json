{
  "openapi": "3.0.0",
  "info": {
    "title": "Fintrak API",
    "version": "1.0.0",
    "description": "API for financial tracking and product management"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/api/analytics/period-summary": {
      "get": {
        "summary": "Get period summary with expenses and incomes by category",
        "description": "Fetch all expenses and incomes for a specific time period with totals grouped by category and latest transactions",
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date of the period"
          },
          {
            "in": "query",
            "name": "dateTo",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date of the period"
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string",
              "enum": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "description": "Optional currency filter"
          },
          {
            "in": "query",
            "name": "latestCount",
            "schema": {
              "type": "integer",
              "default": 5
            },
            "description": "Number of latest transactions to include (default 5)"
          }
        ],
        "responses": {
          "200": {
            "description": "Period summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "period": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        },
                        "currency": {
                          "type": "string"
                        }
                      }
                    },
                    "expenses": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "byCategory": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "categoryId": {
                                "type": "string"
                              },
                              "categoryKey": {
                                "type": "string"
                              },
                              "categoryName": {
                                "type": "string"
                              },
                              "categoryColor": {
                                "type": "string"
                              },
                              "categoryIcon": {
                                "type": "string"
                              },
                              "total": {
                                "type": "number"
                              },
                              "count": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "incomes": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "byCategory": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "categoryId": {
                                "type": "string"
                              },
                              "categoryKey": {
                                "type": "string"
                              },
                              "categoryName": {
                                "type": "string"
                              },
                              "categoryColor": {
                                "type": "string"
                              },
                              "categoryIcon": {
                                "type": "string"
                              },
                              "total": {
                                "type": "number"
                              },
                              "count": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "balance": {
                      "type": "number"
                    },
                    "latestTransactions": {
                      "type": "array",
                      "description": "Latest transactions (expenses and incomes combined) sorted by date",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "expense",
                              "income"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing required parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              },
              "example": {
                "email": "user@example.com",
                "password": "password123"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "User ID"
                    },
                    "email": {
                      "type": "string",
                      "description": "User email"
                    }
                  }
                },
                "example": {
                  "id": "60d0fe4f5311236168a109ca",
                  "email": "user@example.com"
                }
              }
            }
          },
          "500": {
            "description": "Registration failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Registration failed"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login user",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "user@example.com",
                "password": "password123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          },
          "500": {
            "description": "Login failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Login failed"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "summary": "Initiate Google OAuth authentication",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth"
          }
        }
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "summary": "Google OAuth callback",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "302": {
            "description": "Redirect with authentication result"
          }
        }
      }
    },
    "/api/auth/google/token": {
      "post": {
        "summary": "Authenticate with Google ID token (for mobile)",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "idToken": {
                    "type": "string",
                    "description": "Google ID token from mobile app"
                  }
                },
                "example": {
                  "idToken": "eyJhbGciOiJSUzI1NiIsImtpZCI6..."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "profilePicture": {
                          "type": "string"
                        },
                        "authProvider": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "user": {
                    "id": "60d0fe4f5311236168a109ca",
                    "email": "user@gmail.com",
                    "name": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://lh3.googleusercontent.com/...",
                    "authProvider": "google"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Google token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/bank/providers": {
      "get": {
        "summary": "Get available bank providers",
        "description": "Retrieves list of available banks/providers via Tink (filtered by market). Requires user authentication token from Tink OAuth flow.",
        "tags": [
          "Bank Integration (Tink)"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "market",
            "schema": {
              "type": "string",
              "default": "ES"
            },
            "description": "Market code (defaults to ES for Spain)"
          }
        ],
        "responses": {
          "200": {
            "description": "Providers retrieved successfully"
          },
          "401": {
            "description": "User token required (get token from /authorize flow)"
          }
        }
      }
    },
    "/api/bank/authorize": {
      "post": {
        "summary": "Get authorization URL",
        "description": "Generate Tink authorization URL for user to connect their bank",
        "tags": [
          "Bank Integration (Tink)"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "redirectUri"
                ],
                "properties": {
                  "redirectUri": {
                    "type": "string",
                    "description": "URL to redirect after bank authentication"
                  },
                  "state": {
                    "type": "string",
                    "description": "Optional state parameter for security"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authorization URL generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authorizationUrl": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bank/callback": {
      "get": {
        "summary": "Handle OAuth callback",
        "description": "Exchange authorization code for access token",
        "tags": [
          "Bank Integration (Tink)"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code from Tink"
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "accessToken": {
                      "type": "string"
                    },
                    "expiresIn": {
                      "type": "number"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/bank/accounts": {
      "get": {
        "summary": "Get connected bank accounts",
        "description": "Retrieves user's connected bank accounts from Tink",
        "tags": [
          "Bank Integration (Tink)"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Connected accounts retrieved"
          }
        }
      }
    },
    "/api/bank/transactions": {
      "get": {
        "summary": "Get all transactions",
        "description": "Retrieves all transactions from all connected accounts",
        "tags": [
          "Bank Integration (Tink)"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully"
          }
        }
      }
    },
    "/api/bank/accounts/{accountId}/transactions": {
      "get": {
        "summary": "Get account transactions",
        "description": "Retrieves transactions for a specific bank account from Tink",
        "tags": [
          "Bank Integration (Tink)"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bank account ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "summary": "Get user's categories",
        "description": "Retrieves all categories for the authenticated user",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "description": "Creates a new category for the authenticated user",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              },
              "example": {
                "id": "groceries",
                "name": "Groceries",
                "color": "#4CAF50",
                "icon": "shopping-cart"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Category with this ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "summary": "Get category by ID",
        "description": "Retrieves a specific category by ID for the authenticated user",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a category",
        "description": "Updates an existing category for the authenticated user",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The category ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "Updated Groceries",
                "color": "#2196F3",
                "icon": "cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a category",
        "description": "Deletes an existing category for the authenticated user",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Category deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/counterparties/search": {
      "get": {
        "summary": "Search counterparties with filters",
        "description": "Search and filter counterparties for the authenticated user",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Search in counterparty names (case-insensitive)"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "person",
                "institution",
                "other"
              ]
            },
            "description": "Filter by counterparty type"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Search in email addresses (case-insensitive)"
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string"
            },
            "description": "Search in phone numbers (case-insensitive)"
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string"
            },
            "description": "Search in addresses (case-insensitive)"
          },
          {
            "in": "query",
            "name": "notes",
            "schema": {
              "type": "string"
            },
            "description": "Search in notes (case-insensitive)"
          },
          {
            "in": "query",
            "name": "titleTemplate",
            "schema": {
              "type": "string"
            },
            "description": "Search in title templates (case-insensitive)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "type",
                "key",
                "createdAt",
                "updatedAt"
              ],
              "default": "name"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Counterparties retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "counterparties": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Counterparty"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "offset": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filters": {
                      "type": "object"
                    },
                    "sort": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/counterparties/{id}": {
      "get": {
        "summary": "Get counterparty by ID",
        "description": "Retrieves a specific counterparty by ID for the authenticated user",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The counterparty ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Counterparty retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterparty"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Counterparty not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a counterparty",
        "description": "Updates an existing counterparty for the authenticated user",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The counterparty ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "person",
                      "company",
                      "government",
                      "other"
                    ]
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "Updated Amazon",
                "email": "updated@amazon.com",
                "phone": "+1-800-123-4567"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Counterparty updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterparty"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Counterparty not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a counterparty",
        "description": "Deletes an existing counterparty for the authenticated user",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The counterparty ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Counterparty deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Counterparty deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Counterparty not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/counterparties": {
      "post": {
        "summary": "Create a new counterparty",
        "description": "Creates a new counterparty for the authenticated user",
        "tags": [
          "Counterparties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Counterparty"
              },
              "example": {
                "id": "amazon",
                "name": "Amazon",
                "type": "company",
                "email": "support@amazon.com",
                "notes": "Online shopping"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Counterparty created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterparty"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Counterparty with this ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/expenses/search": {
      "get": {
        "summary": "Search expenses with filters",
        "description": "Search and filter expenses for the authenticated user",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Search in expense title (case-insensitive)"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Search in expense description (case-insensitive)"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter expenses from this date"
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter expenses until this date"
          },
          {
            "in": "query",
            "name": "amountMin",
            "schema": {
              "type": "number"
            },
            "description": "Minimum amount filter"
          },
          {
            "in": "query",
            "name": "amountMax",
            "schema": {
              "type": "number"
            },
            "description": "Maximum amount filter"
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string",
              "enum": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "description": "Currency filter"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Category ID filter"
          },
          {
            "in": "query",
            "name": "payee",
            "schema": {
              "type": "string"
            },
            "description": "Payee/Counterparty ID filter"
          },
          {
            "in": "query",
            "name": "periodicity",
            "schema": {
              "type": "string",
              "enum": [
                "NOT_RECURRING",
                "RECURRING_VARIABLE_AMOUNT",
                "RECURRING_FIXED_AMOUNT"
              ]
            },
            "description": "Periodicity filter"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Tag keys filter (matches any)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "amount",
                "title",
                "createdAt"
              ],
              "default": "date"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "includeTotal",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "default": false
            },
            "description": "Whether to include total amount in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Expenses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "expenses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Expense"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "offset": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filters": {
                      "type": "object"
                    },
                    "sort": {
                      "type": "object"
                    },
                    "totalAmount": {
                      "type": "number",
                      "description": "Total amount of all matching expenses (only included when includeTotal=true)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/expenses/{id}": {
      "get": {
        "summary": "Get expense by ID",
        "description": "Retrieves a specific expense by ID for the authenticated user",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The expense ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Expense not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an expense",
        "description": "Updates an existing expense for the authenticated user",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The expense ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenseRequest"
              },
              "example": {
                "title": "Updated Grocery Shopping",
                "amount": 95.75,
                "description": "Weekly groceries with extra items"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expense updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Expense not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an expense",
        "description": "Deletes an existing expense for the authenticated user",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The expense ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Expense deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Expense deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Expense not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/expenses": {
      "post": {
        "summary": "Create a new expense",
        "description": "Creates a new expense for the authenticated user",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExpenseRequest"
              },
              "example": {
                "title": "Grocery Shopping",
                "amount": 85.5,
                "category": "food",
                "date": "2024-01-15T00:00:00.000Z",
                "description": "Weekly groceries"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expense created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expense"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/import/transactions": {
      "post": {
        "summary": "Import transactions from Excel file",
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Excel file containing transactions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "description": "Total number of rows processed"
                    },
                    "imported": {
                      "type": "number",
                      "description": "Number of transactions successfully imported"
                    },
                    "expenses": {
                      "type": "number",
                      "description": "Number of expenses imported"
                    },
                    "income": {
                      "type": "number",
                      "description": "Number of income transactions imported"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of errors encountered during import"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no file uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/import/categories": {
      "post": {
        "summary": "Import categories from JSON file",
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "JSON file containing categories"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "description": "Total number of categories processed"
                    },
                    "imported": {
                      "type": "number",
                      "description": "Number of categories successfully imported"
                    },
                    "updated": {
                      "type": "number",
                      "description": "Number of categories updated"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of errors encountered during import"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no file uploaded or invalid JSON"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/import/tags": {
      "post": {
        "summary": "Import tags from JSON file",
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "JSON file containing tags"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "description": "Total number of tags processed"
                    },
                    "imported": {
                      "type": "number",
                      "description": "Number of tags successfully imported"
                    },
                    "updated": {
                      "type": "number",
                      "description": "Number of tags updated"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of errors encountered during import"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no file uploaded or invalid JSON"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/import/counterparties": {
      "post": {
        "summary": "Import counterparties from JSON file",
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "JSON file containing counterparties"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "description": "Total number of counterparties processed"
                    },
                    "imported": {
                      "type": "number",
                      "description": "Number of counterparties successfully imported"
                    },
                    "updated": {
                      "type": "number",
                      "description": "Number of counterparties updated"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of errors encountered during import"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no file uploaded or invalid JSON"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/import/recurring-transactions": {
      "post": {
        "summary": "Import recurring transactions from JSON file",
        "tags": [
          "Import"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "JSON file containing recurring transactions"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number",
                      "description": "Total number of recurring transactions processed"
                    },
                    "imported": {
                      "type": "number",
                      "description": "Number of recurring transactions successfully imported"
                    },
                    "updated": {
                      "type": "number",
                      "description": "Number of recurring transactions updated"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of errors encountered during import"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - no file uploaded or invalid JSON"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/incomes/search": {
      "get": {
        "summary": "Search incomes with filters",
        "description": "Search and filter incomes for the authenticated user",
        "tags": [
          "Incomes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Search in income title (case-insensitive)"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Search in income description (case-insensitive)"
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter incomes from this date"
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter incomes until this date"
          },
          {
            "in": "query",
            "name": "amountMin",
            "schema": {
              "type": "number"
            },
            "description": "Minimum amount filter"
          },
          {
            "in": "query",
            "name": "amountMax",
            "schema": {
              "type": "number"
            },
            "description": "Maximum amount filter"
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string",
              "enum": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "description": "Currency filter"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Category ID filter"
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "type": "string"
            },
            "description": "Source/Counterparty ID filter"
          },
          {
            "in": "query",
            "name": "periodicity",
            "schema": {
              "type": "string",
              "enum": [
                "NOT_RECURRING",
                "RECURRING_VARIABLE_AMOUNT",
                "RECURRING_FIXED_AMOUNT"
              ]
            },
            "description": "Periodicity filter"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Tag keys filter (matches any)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "amount",
                "title",
                "createdAt"
              ],
              "default": "date"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          },
          {
            "in": "query",
            "name": "includeTotal",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "default": false
            },
            "description": "Whether to include total amount in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Incomes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incomes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Income"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "offset": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filters": {
                      "type": "object"
                    },
                    "sort": {
                      "type": "object"
                    },
                    "totalAmount": {
                      "type": "number",
                      "description": "Total amount of all matching incomes (only included when includeTotal=true)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/incomes/{id}": {
      "get": {
        "summary": "Get income by ID",
        "description": "Retrieves a specific income by ID for the authenticated user",
        "tags": [
          "Incomes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The income ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Income retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Income"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Income not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an income",
        "description": "Updates an existing income for the authenticated user",
        "tags": [
          "Incomes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The income ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIncomeRequest"
              },
              "example": {
                "title": "Updated Freelance Project",
                "amount": 1750,
                "description": "Extended web development project"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Income updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Income"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Income not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an income",
        "description": "Deletes an existing income for the authenticated user",
        "tags": [
          "Incomes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The income ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Income deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Income deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Income not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/incomes": {
      "post": {
        "summary": "Create a new income",
        "description": "Creates a new income for the authenticated user",
        "tags": [
          "Incomes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncomeRequest"
              },
              "example": {
                "title": "Freelance Project",
                "amount": 1500,
                "category": {
                  "id": "freelance",
                  "name": "Freelance Work",
                  "color": "#4CAF50",
                  "icon": "briefcase"
                },
                "date": "2024-01-15T00:00:00.000Z",
                "description": "Web development project"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Income created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Income"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "summary": "Get user's financial products",
        "description": "Retrieves all financial products (deposits, cash accounts, indexed funds) for the authenticated user from the MI service",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProducts"
                },
                "example": {
                  "deposits": [
                    {
                      "id": "dep_123",
                      "amount": 10000,
                      "currency": "EUR",
                      "interestRate": 2.5,
                      "maturityDate": "2025-12-31"
                    }
                  ],
                  "cashAccounts": [
                    {
                      "id": "acc_456",
                      "balance": 5000,
                      "currency": "EUR",
                      "accountType": "CHECKING"
                    }
                  ],
                  "indexedFunds": [
                    {
                      "id": "fund_789",
                      "name": "Global Index Fund",
                      "value": 15000,
                      "currency": "EUR",
                      "performance": 7.2
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/api/recurring-transactions/search": {
      "get": {
        "summary": "Search recurring transactions with filters",
        "description": "Search and filter recurring transactions for the authenticated user",
        "tags": [
          "Recurring Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Search in recurring transaction title (case-insensitive)"
          },
          {
            "in": "query",
            "name": "currency",
            "schema": {
              "type": "string",
              "enum": [
                "EUR",
                "GBP",
                "USD"
              ]
            },
            "description": "Currency filter"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Category ID filter"
          },
          {
            "in": "query",
            "name": "transactionType",
            "schema": {
              "type": "string",
              "enum": [
                "EXPENSE",
                "INCOME"
              ]
            },
            "description": "Transaction type filter"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of results to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip"
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "createdAt"
              ],
              "default": "createdAt"
            },
            "description": "Field to sort by"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Recurring transactions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "recurringTransactions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RecurringTransaction"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "offset": {
                          "type": "integer"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filters": {
                      "type": "object"
                    },
                    "sort": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/recurring-transactions/{id}": {
      "get": {
        "summary": "Get recurring transaction by ID",
        "description": "Retrieves a specific recurring transaction by ID for the authenticated user",
        "tags": [
          "Recurring Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The recurring transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Recurring transaction retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTransaction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Recurring transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a recurring transaction",
        "description": "Updates an existing recurring transaction for the authenticated user",
        "tags": [
          "Recurring Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The recurring transaction ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecurringTransactionRequest"
              },
              "example": {
                "title": "Updated Monthly Rent",
                "currency": "USD",
                "transactionType": "EXPENSE"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recurring transaction updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Recurring transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a recurring transaction",
        "description": "Deletes an existing recurring transaction for the authenticated user",
        "tags": [
          "Recurring Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The recurring transaction ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Recurring transaction deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Recurring transaction deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Recurring transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/recurring-transactions": {
      "post": {
        "summary": "Create a new recurring transaction",
        "description": "Creates a new recurring transaction for the authenticated user",
        "tags": [
          "Recurring Transactions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecurringTransactionRequest"
              },
              "example": {
                "title": "Monthly Rent",
                "currency": "EUR",
                "category": "housing",
                "transactionType": "EXPENSE"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recurring transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags": {
      "get": {
        "summary": "Get user's tags",
        "description": "Retrieves all tags for the authenticated user",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new tag",
        "description": "Creates a new tag for the authenticated user",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              },
              "example": {
                "id": "vacation",
                "name": "Vacation",
                "color": "#FF9800",
                "icon": "plane"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Tag with this ID already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags/{id}": {
      "get": {
        "summary": "Get tag by ID",
        "description": "Retrieves a specific tag by ID for the authenticated user",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The tag ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a tag",
        "description": "Updates an existing tag for the authenticated user",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The tag ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "Updated Vacation",
                "color": "#E91E63",
                "icon": "beach"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a tag",
        "description": "Deletes an existing tag for the authenticated user",
        "tags": [
          "Tags"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The tag ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Tag deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}