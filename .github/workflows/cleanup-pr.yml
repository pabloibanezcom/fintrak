name: Cleanup PR Environment

on:
  pull_request:
    types: [closed]
    paths:
      - 'apps/api/**'
      - 'packages/types/**'

env:
  AWS_REGION: eu-west-1
  ECS_CLUSTER: fintrak-cluster

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  cleanup:
    name: Cleanup PR Environment
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Delete ECS service
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        SERVICE_NAME="fintrak-api-pr-$PR_NUMBER"
        
        # Check if service exists and delete it
        if aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $SERVICE_NAME \
          --region $AWS_REGION \
          --query 'services[0].status' \
          --output text 2>/dev/null | grep -q "ACTIVE"; then
          
          echo "Scaling down service to 0..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $SERVICE_NAME \
            --desired-count 0 \
            --region $AWS_REGION
            
          echo "Waiting for tasks to stop..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $SERVICE_NAME \
            --region $AWS_REGION
            
          echo "Deleting service..."
          aws ecs delete-service \
            --cluster $ECS_CLUSTER \
            --service $SERVICE_NAME \
            --region $AWS_REGION
            
          echo "Service $SERVICE_NAME deleted successfully"
        else
          echo "Service $SERVICE_NAME not found, skipping deletion"
        fi
        
    - name: Deregister task definition
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        TASK_DEF_NAME="fintrak-api-pr-$PR_NUMBER"
        
        # Get all revisions of the task definition
        REVISIONS=$(aws ecs list-task-definitions \
          --family-prefix $TASK_DEF_NAME \
          --status ACTIVE \
          --query 'taskDefinitionArns' \
          --output text \
          --region $AWS_REGION)
          
        if [ -n "$REVISIONS" ]; then
          echo "Deregistering task definition revisions..."
          for arn in $REVISIONS; do
            echo "Deregistering: $arn"
            aws ecs deregister-task-definition \
              --task-definition $arn \
              --region $AWS_REGION
          done
          echo "Task definitions deregistered successfully"
        else
          echo "No task definitions found for $TASK_DEF_NAME"
        fi
        
    - name: Delete CloudWatch log group
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        LOG_GROUP="/ecs/fintrak-api-pr-$PR_NUMBER"
        
        if aws logs describe-log-groups \
          --log-group-name-prefix $LOG_GROUP \
          --region $AWS_REGION \
          --query 'logGroups[0].logGroupName' \
          --output text 2>/dev/null | grep -q "$LOG_GROUP"; then
          
          echo "Deleting log group: $LOG_GROUP"
          aws logs delete-log-group \
            --log-group-name $LOG_GROUP \
            --region $AWS_REGION
          echo "Log group deleted successfully"
        else
          echo "Log group $LOG_GROUP not found, skipping deletion"
        fi
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          
          const comment = `ðŸ§¹ **PR Environment Cleaned Up**
          
          The preview environment for this PR has been automatically removed:
          - ECS service stopped and deleted
          - Task definitions deregistered
          - CloudWatch logs cleaned up
          
          ---
          *Environment cleanup completed successfully*`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });