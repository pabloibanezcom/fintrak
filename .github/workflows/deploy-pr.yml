name: Deploy PR to AWS ECS

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'apps/api/**'
      - 'packages/types/**'
      - '.github/workflows/deploy-pr.yml'

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: fintrak-api
  ECS_CLUSTER: fintrak-cluster
  
jobs:
  deploy-pr:
    name: Deploy PR Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: pr-${{ github.event.pull_request.number }}-${{ github.sha }}
      run: |
        # Build image with PR-specific tag
        docker buildx build \
          --context apps/api \
          --file apps/api/Dockerfile \
          --platform linux/amd64 \
          --push \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:pr-${{ github.event.pull_request.number }} \
          .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Create PR-specific task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: pr-${{ github.event.pull_request.number }}-${{ github.sha }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        # Create PR-specific task definition
        TASK_DEF_NAME="fintrak-api-pr-$PR_NUMBER"
        SERVICE_NAME="fintrak-api-pr-$PR_NUMBER"
        
        # Update task definition with PR-specific values
        sed "s|YOUR_ECR_REPO_URI|$ECR_REGISTRY/$ECR_REPOSITORY|g" aws/ecs-task-definition.json > task-def-pr.json
        sed -i "s|YOUR_ACCOUNT_ID|${{ secrets.AWS_ACCOUNT_ID }}|g" task-def-pr.json
        sed -i "s|\"family\": \"fintrak-api\"|\"family\": \"$TASK_DEF_NAME\"|g" task-def-pr.json
        sed -i "s|:latest|:$IMAGE_TAG|g" task-def-pr.json
        
        # Update log group for PR
        sed -i "s|/ecs/fintrak-api|/ecs/$TASK_DEF_NAME|g" task-def-pr.json
        
        echo "task-def-name=$TASK_DEF_NAME" >> $GITHUB_OUTPUT
        echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        
    - name: Create CloudWatch log group for PR
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        LOG_GROUP="/ecs/fintrak-api-pr-$PR_NUMBER"
        aws logs create-log-group --log-group-name $LOG_GROUP --region $AWS_REGION || true
        
    - name: Register task definition
      id: task-def-register
      run: |
        aws ecs register-task-definition \
          --cli-input-json file://task-def-pr.json \
          --region $AWS_REGION
          
    - name: Check if ECS service exists
      id: check-service
      env:
        SERVICE_NAME: ${{ steps.task-def.outputs.service-name }}
      run: |
        if aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $SERVICE_NAME \
          --region $AWS_REGION \
          --query 'services[0].status' \
          --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Update existing ECS service
      if: steps.check-service.outputs.exists == 'true'
      env:
        SERVICE_NAME: ${{ steps.task-def.outputs.service-name }}
        TASK_DEF_NAME: ${{ steps.task-def.outputs.task-def-name }}
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $SERVICE_NAME \
          --task-definition $TASK_DEF_NAME \
          --region $AWS_REGION
          
    - name: Create new ECS service
      if: steps.check-service.outputs.exists == 'false'
      env:
        SERVICE_NAME: ${{ steps.task-def.outputs.service-name }}
        TASK_DEF_NAME: ${{ steps.task-def.outputs.task-def-name }}
      run: |
        aws ecs create-service \
          --cluster $ECS_CLUSTER \
          --service-name $SERVICE_NAME \
          --task-definition $TASK_DEF_NAME \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
          --region $AWS_REGION
          
    - name: Wait for deployment to complete
      env:
        SERVICE_NAME: ${{ steps.task-def.outputs.service-name }}
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $SERVICE_NAME \
          --region $AWS_REGION
          
    - name: Get service endpoint
      id: get-endpoint
      env:
        SERVICE_NAME: ${{ steps.task-def.outputs.service-name }}
      run: |
        # Get the task ARN
        TASK_ARN=$(aws ecs list-tasks \
          --cluster $ECS_CLUSTER \
          --service-name $SERVICE_NAME \
          --query 'taskArns[0]' \
          --output text \
          --region $AWS_REGION)
          
        # Get the public IP
        PUBLIC_IP=$(aws ecs describe-tasks \
          --cluster $ECS_CLUSTER \
          --tasks $TASK_ARN \
          --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
          --output text \
          --region $AWS_REGION | xargs -I {} aws ec2 describe-network-interfaces \
          --network-interface-ids {} \
          --query 'NetworkInterfaces[0].Association.PublicIp' \
          --output text \
          --region $AWS_REGION)
          
        echo "endpoint=http://$PUBLIC_IP:3000" >> $GITHUB_OUTPUT
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const endpoint = '${{ steps.get-endpoint.outputs.endpoint }}';
          const prNumber = context.payload.pull_request.number;
          
          const comment = `ðŸš€ **PR Environment Deployed!**
          
          **Preview URL:** ${endpoint}
          **API Docs:** ${endpoint}/api/docs
          **Service:** ${{ steps.task-def.outputs.service-name }}
          
          This environment will be automatically updated when you push new commits to this PR.
          
          ---
          *Deployed from commit: ${{ github.sha }}*`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Cleanup temporary files
      run: |
        rm -f task-def-pr.json