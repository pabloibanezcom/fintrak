{
	"info": {
		"_postman_id": "fintrak-api-collection",
		"name": "Fintrak API",
		"description": "Complete API collection for Fintrak financial tracking application including authentication, expense management with advanced search, income tracking with filtering, categories, tags, counterparties with search capabilities, and product endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "fintrak"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user}}\",\n  \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/auth/register",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{user}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/auth/register",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"60d0fe4f5311236168a109ca\",\n  \"email\": \"{{user}}\"\n}"
						}
					]
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"auth_token\", jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user}}\",\n  \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/auth/login",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login user and receive JWT token (automatically saved to environment)"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{user}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/auth/login",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"id\": \"60d0fe4f5311236168a109ca\",\n  \"email\": \"{{user}}\"\n}"
						}
					]
				}
			],
			"description": "User authentication endpoints for registration and login"
		},
		{
			"name": "Expenses",
			"item": [
				{
					"name": "Search Expenses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/expenses/search?limit=20&offset=0&sortBy=date&sortOrder=desc&dateFrom=2024-01-01&dateTo=2024-12-31",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "grocery",
									"description": "Search in expense titles (case-insensitive)",
									"disabled": true
								},
								{
									"key": "description",
									"value": "weekly",
									"description": "Search in expense descriptions (case-insensitive)",
									"disabled": true
								},
								{
									"key": "dateFrom",
									"value": "2024-01-01",
									"description": "Filter expenses from this date (YYYY-MM-DD)"
								},
								{
									"key": "dateTo",
									"value": "2024-12-31",
									"description": "Filter expenses until this date (YYYY-MM-DD)"
								},
								{
									"key": "amountMin",
									"value": "10",
									"description": "Minimum amount filter",
									"disabled": true
								},
								{
									"key": "amountMax",
									"value": "500",
									"description": "Maximum amount filter",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "EUR",
									"description": "Currency filter (EUR, GBP, USD)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "{{category_id}}",
									"description": "Category ID filter",
									"disabled": true
								},
								{
									"key": "payee",
									"value": "{{counterparty_id}}",
									"description": "Payee/Counterparty ID filter",
									"disabled": true
								},
								{
									"key": "periodicity",
									"value": "NOT_RECURRING",
									"description": "Periodicity filter",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "weekly,vacation",
									"description": "Tag keys filter (comma-separated, matches any)",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of results to return (1-100, default: 50)"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of results to skip (default: 0)"
								},
								{
									"key": "sortBy",
									"value": "date",
									"description": "Field to sort by (date, amount, title, createdAt)"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "Sort order (asc, desc)"
								},
								{
									"key": "includeTotal",
									"value": "false",
									"description": "Whether to include total amount in response (true/false, default: false)",
									"disabled": true
								}
							]
						},
						"description": "Search and filter expenses with pagination and sorting. All filters are optional and can be combined."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/expenses/search?title=grocery&amountMin=50&limit=10",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"expenses",
										"search"
									],
									"query": [
										{
											"key": "title",
											"value": "grocery"
										},
										{
											"key": "amountMin",
											"value": "50"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"expenses\": [\n    {\n      \"_id\": \"60d0fe4f5311236168a109cb\",\n      \"title\": \"Compra en Mercadona\",\n      \"amount\": 85.50,\n      \"currency\": \"EUR\",\n      \"category\": {\n        \"_id\": \"60d0fe4f5311236168a109cc\",\n        \"key\": \"groceries\",\n        \"name\": \"Groceries\",\n        \"color\": \"#4CAF50\",\n        \"icon\": \"shopping-cart\"\n      },\n      \"payee\": {\n        \"_id\": \"60d0fe4f5311236168a109cd\",\n        \"key\": \"mercadona\",\n        \"name\": \"Mercadona\",\n        \"type\": \"company\"\n      },\n      \"date\": \"2024-01-15T00:00:00.000Z\",\n      \"periodicity\": \"NOT_RECURRING\",\n      \"tags\": [],\n      \"userId\": \"60d0fe4f5311236168a109ca\",\n      \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 15,\n    \"limit\": 10,\n    \"offset\": 0,\n    \"hasMore\": true\n  },\n  \"filters\": {\n    \"title\": \"grocery\",\n    \"amountMin\": \"50\"\n  },\n  \"sort\": {\n    \"sortBy\": \"date\",\n    \"sortOrder\": \"desc\"\n  },\n  \"totalAmount\": 1275.85\n}"
						},
						{
							"name": "Success with Total",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/expenses/search?title=grocery&includeTotal=true&limit=10",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"expenses",
										"search"
									],
									"query": [
										{
											"key": "title",
											"value": "grocery"
										},
										{
											"key": "includeTotal",
											"value": "true"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"expenses\": [\n    {\n      \"_id\": \"60d0fe4f5311236168a109cb\",\n      \"title\": \"Compra en Mercadona\",\n      \"amount\": 85.50,\n      \"currency\": \"EUR\",\n      \"category\": {\n        \"_id\": \"60d0fe4f5311236168a109cc\",\n        \"key\": \"groceries\",\n        \"name\": \"Groceries\",\n        \"color\": \"#4CAF50\",\n        \"icon\": \"shopping-cart\"\n      },\n      \"payee\": {\n        \"_id\": \"60d0fe4f5311236168a109cd\",\n        \"key\": \"mercadona\",\n        \"name\": \"Mercadona\",\n        \"type\": \"company\"\n      },\n      \"date\": \"2024-01-15T00:00:00.000Z\",\n      \"periodicity\": \"NOT_RECURRING\",\n      \"tags\": [],\n      \"userId\": \"60d0fe4f5311236168a109ca\",\n      \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 15,\n    \"limit\": 10,\n    \"offset\": 0,\n    \"hasMore\": true\n  },\n  \"filters\": {\n    \"title\": \"grocery\"\n  },\n  \"sort\": {\n    \"sortBy\": \"date\",\n    \"sortOrder\": \"desc\"\n  },\n  \"totalAmount\": 1275.85\n}"
						}
					]
				},
				{
					"name": "Get Expense by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/expenses/{{expense_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{expense_id}}"
							]
						},
						"description": "Retrieve a specific expense by ID"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/expenses/60d0fe4f5311236168a109cb",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"expenses",
										"60d0fe4f5311236168a109cb"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"_id\": \"60d0fe4f5311236168a109cb\",\n  \"title\": \"Grocery Shopping\",\n  \"amount\": 85.50,\n  \"category\": \"food\",\n  \"date\": \"2024-01-15T00:00:00.000Z\",\n  \"description\": \"Weekly groceries\",\n  \"userId\": \"60d0fe4f5311236168a109ca\",\n  \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n  \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Create Expense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"expense_id\", jsonData._id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Grocery Shopping\",\n  \"amount\": 85.50,\n  \"category\": {\n    \"id\": \"groceries\",\n    \"name\": \"Groceries\",\n    \"color\": \"#4CAF50\",\n    \"icon\": \"shopping-cart\"\n  },\n  \"payee\": {\n    \"id\": \"supermarket\",\n    \"name\": \"Local Supermarket\",\n    \"type\": \"company\"\n  },\n  \"date\": \"2024-01-15T00:00:00.000Z\",\n  \"description\": \"Weekly groceries\",\n  \"tags\": [\n    {\n      \"id\": \"weekly\",\n      \"name\": \"Weekly\",\n      \"color\": \"#2196F3\",\n      \"icon\": \"calendar\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/expenses",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"expenses"
							]
						},
						"description": "Create a new expense (automatically saves expense ID to environment)"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Grocery Shopping\",\n  \"amount\": 85.50,\n  \"category\": \"food\",\n  \"date\": \"2024-01-15T00:00:00.000Z\",\n  \"description\": \"Weekly groceries\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/expenses",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"expenses"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"_id\": \"60d0fe4f5311236168a109cb\",\n  \"title\": \"Grocery Shopping\",\n  \"amount\": 85.50,\n  \"category\": \"food\",\n  \"date\": \"2024-01-15T00:00:00.000Z\",\n  \"description\": \"Weekly groceries\",\n  \"userId\": \"60d0fe4f5311236168a109ca\",\n  \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n  \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Update Expense",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Grocery Shopping\",\n  \"amount\": 95.75,\n  \"description\": \"Weekly groceries with extra items\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/expenses/{{expense_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{expense_id}}"
							]
						},
						"description": "Update an existing expense"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Grocery Shopping\",\n  \"amount\": 95.75,\n  \"description\": \"Weekly groceries with extra items\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/expenses/60d0fe4f5311236168a109cb",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"expenses",
										"60d0fe4f5311236168a109cb"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"_id\": \"60d0fe4f5311236168a109cb\",\n  \"title\": \"Updated Grocery Shopping\",\n  \"amount\": 95.75,\n  \"category\": \"food\",\n  \"date\": \"2024-01-15T00:00:00.000Z\",\n  \"description\": \"Weekly groceries with extra items\",\n  \"userId\": \"60d0fe4f5311236168a109ca\",\n  \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n  \"updatedAt\": \"2024-01-15T10:05:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Delete Expense",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/expenses/{{expense_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"expenses",
								"{{expense_id}}"
							]
						},
						"description": "Delete an existing expense"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/expenses/60d0fe4f5311236168a109cb",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"expenses",
										"60d0fe4f5311236168a109cb"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Expense deleted successfully\"\n}"
						}
					]
				}
			],
			"description": "Complete CRUD operations for expense management with advanced search and filtering capabilities"
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Import Transactions from Excel",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "",
									"description": "Excel file (.xlsx) containing transactions. Supports BBVA 'Últimos movimientos' format or standard format with columns: date, description, amount, currency (optional), type (optional), category (optional), periodicity (optional)"
								}
							]
						},
						"url": {
							"raw": "{{rootUrl}}/api/import/transactions",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"import",
								"transactions"
							]
						},
						"description": "Import transactions from Excel file. Automatically detects BBVA format or processes standard format. Negative amounts are treated as expenses, positive as income."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/path/to/transactions.xlsx"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total\": 40,\n  \"imported\": 40,\n  \"expenses\": 37,\n  \"income\": 3,\n  \"format\": \"BBVA\",\n  \"errors\": []\n}"
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/path/to/invalid.xlsx"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total\": 10,\n  \"imported\": 7,\n  \"expenses\": 5,\n  \"income\": 2,\n  \"format\": \"Standard\",\n  \"errors\": [\n    \"Row 3: Invalid date format\",\n    \"Row 7: Missing required fields (date, description, amount)\",\n    \"Row 10: Validation failed: amount must be a number\"\n  ]\n}"
						},
						{
							"name": "No File Uploaded",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"transactions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"No file uploaded\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/path/to/transactions.xlsx"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"transactions"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"error\": \"User not authenticated\"\n}"
						}
					]
				},
				{
					"name": "Import Categories from JSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "",
									"description": "JSON file containing categories. Expected format: [{\"key\": \"food_dining\", \"name\": \"Food & Dining\", \"color\": \"#FF6B35\", \"icon\": \"restaurant\", \"keywords\": [\"restaurant\", \"food\", \"dining\"]}]"
								}
							]
						},
						"url": {
							"raw": "{{rootUrl}}/api/import/categories",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"import",
								"categories"
							]
						},
						"description": "Import categories from JSON file. Categories with existing keys will be replaced. Supports keywords for automatic transaction categorization."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/path/to/categories.json"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/categories",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total\": 18,\n  \"imported\": 15,\n  \"updated\": 3,\n  \"errors\": []\n}"
						}
					]
				},
				{
					"name": "Import Tags from JSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "",
									"description": "JSON file containing tags. Expected format: [{\"key\": \"urgent\", \"name\": \"Urgent\", \"color\": \"#FF0000\", \"icon\": \"alert\"}]"
								}
							]
						},
						"url": {
							"raw": "{{rootUrl}}/api/import/tags",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"import",
								"tags"
							]
						},
						"description": "Import tags from JSON file. Tags with existing keys will be replaced. Useful for organizing and filtering transactions."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/path/to/tags.json"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/tags",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"tags"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total\": 18,\n  \"imported\": 16,\n  \"updated\": 2,\n  \"errors\": []\n}"
						}
					]
				},
				{
					"name": "Import Counterparties from JSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "",
									"description": "JSON file containing counterparties. Expected format: [{\"key\": \"amazon_es\", \"name\": \"Amazon España\", \"type\": {\"key\": \"company\", \"name\": \"Empresa\"}, \"email\": \"customerservice@amazon.es\", \"notes\": \"Tienda online\"}]"
								}
							]
						},
						"url": {
							"raw": "{{rootUrl}}/api/import/counterparties",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"import",
								"counterparties"
							]
						},
						"description": "Import counterparties from JSON file. Counterparties with existing keys will be replaced. Useful for managing payees and income sources."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/path/to/counterparties.json"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/counterparties",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"counterparties"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total\": 32,\n  \"imported\": 30,\n  \"updated\": 2,\n  \"errors\": []\n}"
						}
					]
				},
				{
					"name": "Import Recurring Transactions from JSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/data/recurringTransactions.json"
								}
							]
						},
						"url": {
							"raw": "{{rootUrl}}/api/import/recurring-transactions",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"import",
								"recurring-transactions"
							]
						},
						"description": "Import recurring transactions from JSON file. The file should contain an array of recurring transaction objects with title, currency, category, transactionType, periodicity, and optional minAproxAmount/maxAproxAmount."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/data/recurringTransactions.json"
										}
									]
								},
								"url": {
									"raw": "{{rootUrl}}/api/import/recurring-transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"import",
										"recurring-transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"total\": 15,\n  \"imported\": 13,\n  \"updated\": 2,\n  \"errors\": []\n}"
						}
					]
				}
			],
			"description": "Import data from external files. Supports Excel transactions (BBVA format), JSON categories with smart keywords, JSON tags, JSON counterparties, and JSON recurring transactions. All imports prevent duplicates by replacing existing items with same keys."
		},
		{
			"name": "Incomes",
			"item": [
				{
					"name": "Search Incomes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/incomes/search?limit=20&offset=0&sortBy=date&sortOrder=desc&dateFrom=2024-01-01&dateTo=2024-12-31",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "freelance",
									"description": "Search in income titles (case-insensitive)",
									"disabled": true
								},
								{
									"key": "description",
									"value": "project",
									"description": "Search in income descriptions (case-insensitive)",
									"disabled": true
								},
								{
									"key": "dateFrom",
									"value": "2024-01-01",
									"description": "Filter incomes from this date (YYYY-MM-DD)"
								},
								{
									"key": "dateTo",
									"value": "2024-12-31",
									"description": "Filter incomes until this date (YYYY-MM-DD)"
								},
								{
									"key": "amountMin",
									"value": "100",
									"description": "Minimum amount filter",
									"disabled": true
								},
								{
									"key": "amountMax",
									"value": "5000",
									"description": "Maximum amount filter",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "EUR",
									"description": "Currency filter (EUR, GBP, USD)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "{{category_id}}",
									"description": "Category ID filter",
									"disabled": true
								},
								{
									"key": "source",
									"value": "{{counterparty_id}}",
									"description": "Source/Counterparty ID filter",
									"disabled": true
								},
								{
									"key": "periodicity",
									"value": "NOT_RECURRING",
									"description": "Periodicity filter",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "project,work",
									"description": "Tag keys filter (comma-separated, matches any)",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of results to return (1-100, default: 50)"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of results to skip (default: 0)"
								},
								{
									"key": "sortBy",
									"value": "date",
									"description": "Field to sort by (date, amount, title, createdAt)"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "Sort order (asc, desc)"
								},
								{
									"key": "includeTotal",
									"value": "false",
									"description": "Whether to include total amount in response (true/false, default: false)",
									"disabled": true
								}
							]
						},
						"description": "Search and filter incomes with pagination and sorting. All filters are optional and can be combined."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/incomes/search?title=freelance&amountMin=1000&limit=10",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"incomes",
										"search"
									],
									"query": [
										{
											"key": "title",
											"value": "freelance"
										},
										{
											"key": "amountMin",
											"value": "1000"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"incomes\": [\n    {\n      \"_id\": \"60d0fe4f5311236168a109ce\",\n      \"title\": \"Ingreso Empresa XYZ\",\n      \"amount\": 2500.00,\n      \"currency\": \"EUR\",\n      \"category\": {\n        \"_id\": \"60d0fe4f5311236168a109cf\",\n        \"key\": \"salary\",\n        \"name\": \"Salary\",\n        \"color\": \"#4CAF50\",\n        \"icon\": \"money\"\n      },\n      \"source\": {\n        \"_id\": \"60d0fe4f5311236168a109d0\",\n        \"key\": \"empresa_xyz\",\n        \"name\": \"Empresa XYZ\",\n        \"type\": \"company\"\n      },\n      \"date\": \"2024-01-30T00:00:00.000Z\",\n      \"periodicity\": \"RECURRING_FIXED_AMOUNT\",\n      \"tags\": [],\n      \"userId\": \"60d0fe4f5311236168a109ca\",\n      \"createdAt\": \"2024-01-30T09:00:00.000Z\",\n      \"updatedAt\": \"2024-01-30T09:00:00.000Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 8,\n    \"limit\": 10,\n    \"offset\": 0,\n    \"hasMore\": false\n  },\n  \"filters\": {\n    \"title\": \"freelance\",\n    \"amountMin\": \"1000\"\n  },\n  \"sort\": {\n    \"sortBy\": \"date\",\n    \"sortOrder\": \"desc\"\n  },\n  \"totalAmount\": 18750.00\n}"
						},
						{
							"name": "Success with Total",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/incomes/search?title=freelance&includeTotal=true&limit=10",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"incomes",
										"search"
									],
									"query": [
										{
											"key": "title",
											"value": "freelance"
										},
										{
											"key": "includeTotal",
											"value": "true"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"incomes\": [\n    {\n      \"_id\": \"60d0fe4f5311236168a109ce\",\n      \"title\": \"Freelance Project Q1\",\n      \"amount\": 2500.00,\n      \"currency\": \"EUR\",\n      \"category\": {\n        \"_id\": \"60d0fe4f5311236168a109cf\",\n        \"key\": \"freelance\",\n        \"name\": \"Freelance Work\",\n        \"color\": \"#4CAF50\",\n        \"icon\": \"briefcase\"\n      },\n      \"source\": {\n        \"_id\": \"60d0fe4f5311236168a109d0\",\n        \"key\": \"client_abc\",\n        \"name\": \"ABC Company\",\n        \"type\": \"company\"\n      },\n      \"date\": \"2024-03-15T00:00:00.000Z\",\n      \"periodicity\": \"NOT_RECURRING\",\n      \"tags\": [],\n      \"userId\": \"60d0fe4f5311236168a109ca\",\n      \"createdAt\": \"2024-03-15T09:00:00.000Z\",\n      \"updatedAt\": \"2024-03-15T09:00:00.000Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 5,\n    \"limit\": 10,\n    \"offset\": 0,\n    \"hasMore\": false\n  },\n  \"filters\": {\n    \"title\": \"freelance\"\n  },\n  \"sort\": {\n    \"sortBy\": \"date\",\n    \"sortOrder\": \"desc\"\n  },\n  \"totalAmount\": 8750.00\n}"
						}
					]
				},
				{
					"name": "Create Income",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"income_id\", jsonData._id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Freelance Project\",\n  \"amount\": 1500.00,\n  \"category\": {\n    \"id\": \"freelance\",\n    \"name\": \"Freelance Work\",\n    \"color\": \"#4CAF50\",\n    \"icon\": \"briefcase\"\n  },\n  \"source\": {\n    \"id\": \"client-abc\",\n    \"name\": \"ABC Company\",\n    \"type\": \"company\",\n    \"email\": \"projects@abc.com\"\n  },\n  \"date\": \"2024-01-15T00:00:00.000Z\",\n  \"description\": \"Web development project\",\n  \"tags\": [\n    {\n      \"id\": \"project\",\n      \"name\": \"Project Work\",\n      \"color\": \"#FF9800\",\n      \"icon\": \"code\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/incomes",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"incomes"
							]
						},
						"description": "Create a new income"
					}
				},
				{
					"name": "Update Income",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Freelance Project\",\n  \"amount\": 1750.00,\n  \"description\": \"Extended web development project\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/incomes/{{income_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{income_id}}"
							]
						},
						"description": "Update an existing income"
					}
				},
				{
					"name": "Delete Income",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/incomes/{{income_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"incomes",
								"{{income_id}}"
							]
						},
						"description": "Delete an existing income"
					}
				}
			],
			"description": "Complete CRUD operations for income tracking with advanced search and filtering capabilities"
		},
		{
			"name": "Recurring Transactions",
			"item": [
				{
					"name": "Search Recurring Transactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/recurring-transactions/search?limit=20&offset=0&sortBy=createdAt&sortOrder=desc&transactionType=EXPENSE&periodicity=MONTHLY",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"recurring-transactions",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "Alquiler",
									"disabled": true,
									"description": "Search by title (case-insensitive)"
								},
								{
									"key": "currency",
									"value": "EUR",
									"disabled": true,
									"description": "Filter by currency"
								},
								{
									"key": "category",
									"value": "{{category_id}}",
									"disabled": true,
									"description": "Filter by category ID"
								},
								{
									"key": "transactionType",
									"value": "EXPENSE",
									"description": "Filter by transaction type"
								},
								{
									"key": "periodicity",
									"value": "MONTHLY",
									"description": "Filter by periodicity"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of results"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Results offset"
								},
								{
									"key": "sortBy",
									"value": "createdAt",
									"description": "Sort field"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "Sort order"
								}
							]
						},
						"description": "Search and filter recurring transactions with pagination"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/recurring-transactions/search?limit=20&offset=0&sortBy=createdAt&sortOrder=desc",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"recurring-transactions",
										"search"
									],
									"query": [
										{
											"key": "limit",
											"value": "20"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "sortBy",
											"value": "createdAt"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"recurringTransactions\": [\n    {\n      \"id\": \"674a1b2c3d4e5f6789abcdef\",\n      \"title\": \"Alquiler\",\n      \"currency\": \"EUR\",\n      \"category\": {\n        \"id\": \"674a1b2c3d4e5f6789abcd01\",\n        \"key\": \"vivienda\",\n        \"name\": \"Vivienda\",\n        \"color\": \"#8B5CF6\",\n        \"icon\": \"home\"\n      },\n      \"transactionType\": \"EXPENSE\",\n      \"minAproxAmount\": 800,\n      \"maxAproxAmount\": 1200,\n      \"periodicity\": \"MONTHLY\",\n      \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 15,\n    \"limit\": 20,\n    \"offset\": 0,\n    \"hasMore\": false\n  },\n  \"filters\": {\n    \"transactionType\": \"EXPENSE\",\n    \"periodicity\": \"MONTHLY\"\n  },\n  \"sort\": {\n    \"sortBy\": \"createdAt\",\n    \"sortOrder\": \"desc\"\n  }\n}"
						}
					]
				},
				{
					"name": "Get Recurring Transaction by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/recurring-transactions/{{recurring_transaction_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"recurring-transactions",
								"{{recurring_transaction_id}}"
							]
						},
						"description": "Get a specific recurring transaction by ID"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/recurring-transactions/674a1b2c3d4e5f6789abcdef",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"recurring-transactions",
										"674a1b2c3d4e5f6789abcdef"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674a1b2c3d4e5f6789abcdef\",\n  \"title\": \"Alquiler\",\n  \"currency\": \"EUR\",\n  \"category\": {\n    \"id\": \"674a1b2c3d4e5f6789abcd01\",\n    \"key\": \"vivienda\",\n    \"name\": \"Vivienda\",\n    \"color\": \"#8B5CF6\",\n    \"icon\": \"home\"\n  },\n  \"transactionType\": \"EXPENSE\",\n  \"minAproxAmount\": 800,\n  \"maxAproxAmount\": 1200,\n  \"periodicity\": \"MONTHLY\",\n  \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n  \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Create Recurring Transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Seguro del coche\",\n  \"currency\": \"EUR\",\n  \"category\": \"{{category_id}}\",\n  \"transactionType\": \"EXPENSE\",\n  \"minAproxAmount\": 150,\n  \"maxAproxAmount\": 300,\n  \"periodicity\": \"QUARTERLY\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/recurring-transactions",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"recurring-transactions"
							]
						},
						"description": "Create a new recurring transaction"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Seguro del coche\",\n  \"currency\": \"EUR\",\n  \"category\": \"674a1b2c3d4e5f6789abcd01\",\n  \"transactionType\": \"EXPENSE\",\n  \"minAproxAmount\": 150,\n  \"maxAproxAmount\": 300,\n  \"periodicity\": \"QUARTERLY\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/recurring-transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"recurring-transactions"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674a1b2c3d4e5f6789abcde0\",\n  \"title\": \"Seguro del coche\",\n  \"currency\": \"EUR\",\n  \"category\": {\n    \"id\": \"674a1b2c3d4e5f6789abcd01\",\n    \"key\": \"transporte\",\n    \"name\": \"Transporte\",\n    \"color\": \"#4ECDC4\",\n    \"icon\": \"car\"\n  },\n  \"transactionType\": \"EXPENSE\",\n  \"minAproxAmount\": 150,\n  \"maxAproxAmount\": 300,\n  \"periodicity\": \"QUARTERLY\",\n  \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n  \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Update Recurring Transaction",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Seguro del coche actualizado\",\n  \"minAproxAmount\": 160,\n  \"maxAproxAmount\": 320\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/recurring-transactions/{{recurring_transaction_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"recurring-transactions",
								"{{recurring_transaction_id}}"
							]
						},
						"description": "Update an existing recurring transaction"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Seguro del coche actualizado\",\n  \"minAproxAmount\": 160,\n  \"maxAproxAmount\": 320\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/recurring-transactions/674a1b2c3d4e5f6789abcde0",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"recurring-transactions",
										"674a1b2c3d4e5f6789abcde0"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"674a1b2c3d4e5f6789abcde0\",\n  \"title\": \"Seguro del coche actualizado\",\n  \"currency\": \"EUR\",\n  \"category\": {\n    \"id\": \"674a1b2c3d4e5f6789abcd01\",\n    \"key\": \"transporte\",\n    \"name\": \"Transporte\",\n    \"color\": \"#4ECDC4\",\n    \"icon\": \"car\"\n  },\n  \"transactionType\": \"EXPENSE\",\n  \"minAproxAmount\": 160,\n  \"maxAproxAmount\": 320,\n  \"periodicity\": \"QUARTERLY\",\n  \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n  \"updatedAt\": \"2024-01-15T11:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Delete Recurring Transaction",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/recurring-transactions/{{recurring_transaction_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"recurring-transactions",
								"{{recurring_transaction_id}}"
							]
						},
						"description": "Delete an existing recurring transaction"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/recurring-transactions/674a1b2c3d4e5f6789abcde0",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"recurring-transactions",
										"674a1b2c3d4e5f6789abcde0"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Recurring transaction deleted successfully\"\n}"
						}
					]
				}
			],
			"description": "Complete CRUD operations for recurring transactions with search and filtering capabilities. Manage templates for recurring expenses and income."
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get All Categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/categories",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Retrieve all categories for the authenticated user"
					}
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"category_id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"groceries\",\n  \"name\": \"Groceries\",\n  \"color\": \"#4CAF50\",\n  \"icon\": \"shopping-cart\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/categories",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Create a new category"
					}
				},
				{
					"name": "Update Category",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Groceries\",\n  \"color\": \"#2196F3\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/categories/{{category_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{category_id}}"
							]
						},
						"description": "Update an existing category"
					}
				},
				{
					"name": "Delete Category",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/categories/{{category_id}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{category_id}}"
							]
						},
						"description": "Delete an existing category"
					}
				}
			],
			"description": "Complete CRUD operations for category management"
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Get All Tags",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/tags",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"tags"
							]
						},
						"description": "Retrieve all tags for the authenticated user"
					}
				},
				{
					"name": "Create Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"tag_id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"vacation\",\n  \"name\": \"Vacation\",\n  \"color\": \"#FF9800\",\n  \"icon\": \"plane\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/tags",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"tags"
							]
						},
						"description": "Create a new tag"
					}
				}
			],
			"description": "CRUD operations for tag management"
		},
		{
			"name": "Counterparties",
			"item": [
				{
					"name": "Search Counterparties",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/counterparties/search?limit=20&offset=0&sortBy=name&sortOrder=asc",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"counterparties",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "amazon",
									"description": "Search in counterparty names (case-insensitive)",
									"disabled": true
								},
								{
									"key": "type",
									"value": "company",
									"description": "Filter by counterparty type (company, person, institution, other)",
									"disabled": true
								},
								{
									"key": "email",
									"value": "support",
									"description": "Search in email addresses (case-insensitive)",
									"disabled": true
								},
								{
									"key": "phone",
									"value": "+1",
									"description": "Search in phone numbers (case-insensitive)",
									"disabled": true
								},
								{
									"key": "address",
									"value": "madrid",
									"description": "Search in addresses (case-insensitive)",
									"disabled": true
								},
								{
									"key": "notes",
									"value": "online",
									"description": "Search in notes (case-insensitive)",
									"disabled": true
								},
								{
									"key": "titleTemplate",
									"value": "compra",
									"description": "Search in title templates (case-insensitive)",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of results to return (1-100, default: 50)"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of results to skip (default: 0)"
								},
								{
									"key": "sortBy",
									"value": "name",
									"description": "Field to sort by (name, type, key, createdAt, updatedAt)"
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"description": "Sort order (asc, desc)"
								}
							]
						},
						"description": "Search and filter counterparties with pagination and sorting. All filters are optional and can be combined."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/counterparties/search?name=amazon&type=company&limit=10",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"counterparties",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "amazon"
										},
										{
											"key": "type",
											"value": "company"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"counterparties\": [\n    {\n      \"_id\": \"60d0fe4f5311236168a109cd\",\n      \"key\": \"amazon\",\n      \"name\": \"Amazon\",\n      \"type\": \"company\",\n      \"titleTemplate\": \"Compra en {name}\",\n      \"email\": \"support@amazon.com\",\n      \"notes\": \"Online shopping platform\",\n      \"userId\": \"60d0fe4f5311236168a109ca\",\n      \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 1,\n    \"limit\": 10,\n    \"offset\": 0,\n    \"hasMore\": false\n  },\n  \"filters\": {\n    \"name\": \"amazon\",\n    \"type\": \"company\"\n  },\n  \"sort\": {\n    \"sortBy\": \"name\",\n    \"sortOrder\": \"asc\"\n  }\n}"
						}
					]
				},
				{
					"name": "Get Counterparty by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/counterparties/{{counterparty_key}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"counterparties",
								"{{counterparty_key}}"
							]
						},
						"description": "Retrieve a specific counterparty by its key/ID"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/counterparties/amazon",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"counterparties",
										"amazon"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"_id\": \"60d0fe4f5311236168a109cd\",\n  \"key\": \"amazon\",\n  \"name\": \"Amazon\",\n  \"type\": \"company\",\n  \"titleTemplate\": \"Compra en {name}\",\n  \"email\": \"support@amazon.com\",\n  \"notes\": \"Online shopping platform\",\n  \"userId\": \"60d0fe4f5311236168a109ca\",\n  \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n  \"updatedAt\": \"2024-01-15T10:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Create Counterparty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"counterparty_id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"amazon\",\n  \"name\": \"Amazon\",\n  \"type\": \"company\",\n  \"email\": \"support@amazon.com\",\n  \"notes\": \"Online shopping\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/counterparties",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"counterparties"
							]
						},
						"description": "Create a new counterparty"
					}
				},
				{
					"name": "Update Counterparty",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Amazon\",\n  \"email\": \"updated@amazon.com\",\n  \"phone\": \"+1-800-123-4567\",\n  \"titleTemplate\": \"Compra actualizada en {name}\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/counterparties/{{counterparty_key}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"counterparties",
								"{{counterparty_key}}"
							]
						},
						"description": "Update an existing counterparty by its key/ID"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Amazon\",\n  \"email\": \"updated@amazon.com\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/counterparties/amazon",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"counterparties",
										"amazon"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"_id\": \"60d0fe4f5311236168a109cd\",\n  \"key\": \"amazon\",\n  \"name\": \"Updated Amazon\",\n  \"type\": \"company\",\n  \"titleTemplate\": \"Compra actualizada en {name}\",\n  \"email\": \"updated@amazon.com\",\n  \"notes\": \"Online shopping platform\",\n  \"userId\": \"60d0fe4f5311236168a109ca\",\n  \"createdAt\": \"2024-01-15T10:00:00.000Z\",\n  \"updatedAt\": \"2024-01-15T12:00:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Delete Counterparty",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/counterparties/{{counterparty_key}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"counterparties",
								"{{counterparty_key}}"
							]
						},
						"description": "Delete a counterparty by its key/ID"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/counterparties/amazon",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"counterparties",
										"amazon"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Counterparty deleted successfully\"\n}"
						}
					]
				}
			],
			"description": "CRUD operations for counterparty management with advanced search and filtering (payees and income sources)"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get User Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/products",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Retrieve all financial products (deposits, cash accounts, indexed funds) for the authenticated user from the MI service"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/products",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"products"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"deposits\": [\n    {\n      \"id\": \"dep_123\",\n      \"amount\": 10000,\n      \"currency\": \"EUR\",\n      \"interestRate\": 2.5,\n      \"maturityDate\": \"2025-12-31\"\n    }\n  ],\n  \"cashAccounts\": [\n    {\n      \"id\": \"acc_456\",\n      \"balance\": 5000,\n      \"currency\": \"EUR\",\n      \"accountType\": \"CHECKING\"\n    }\n  ],\n  \"indexedFunds\": [\n    {\n      \"id\": \"fund_789\",\n      \"name\": \"Global Index Fund\",\n      \"value\": 15000,\n      \"currency\": \"EUR\",\n      \"performance\": 7.2\n    }\n  ]\n}"
						}
					]
				}
			],
			"description": "Financial products from external MI service"
		},
		{
			"name": "Bank Integration (Tink)",
			"item": [
				{
					"name": "Get Available Bank Providers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/bank/providers?market=ES",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"bank",
								"providers"
							],
							"query": [
								{
									"key": "market",
									"value": "ES",
									"description": "Market code (ES for Spain, defaults to ES)"
								}
							]
						},
						"description": "Retrieve list of available bank providers via Tink API (includes BBVA and other Spanish banks)"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/bank/providers?market=ES",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"bank",
										"providers"
									],
									"query": [
										{
											"key": "market",
											"value": "ES"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"es-bbva-oauth\",\n    \"displayName\": \"BBVA\",\n    \"type\": \"BANK\",\n    \"status\": \"ENABLED\",\n    \"credentialsType\": \"MOBILE_BANKID\",\n    \"isPopular\": true,\n    \"marketCode\": \"ES\",\n    \"accessType\": \"OPEN_BANKING\",\n    \"transactional\": true,\n    \"capabilities\": [\"ACCOUNTS\", \"TRANSACTIONS\", \"BALANCES\"],\n    \"image\": \"https://cdn.tink.se/provider-images/bbva.png\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get Authorization URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    console.log(\"Redirect user to:\", jsonData.authorizationUrl);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"redirectUri\": \"http://localhost:3000/api/bank/callback\",\n  \"state\": \"random_state_string_123\"\n}"
						},
						"url": {
							"raw": "{{rootUrl}}/api/bank/authorize",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"bank",
								"authorize"
							]
						},
						"description": "Generate Tink authorization URL. Redirect user to this URL to connect their BBVA account."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"redirectUri\": \"http://localhost:3000/api/bank/callback\"\n}"
								},
								"url": {
									"raw": "{{rootUrl}}/api/bank/authorize",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"bank",
										"authorize"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"authorizationUrl\": \"https://link.tink.com/1.0/authorize/?client_id=YOUR_CLIENT_ID&redirect_uri=http://localhost:3000/api/bank/callback&scope=accounts:read,transactions:read,balances:read&market=ES&locale=es_ES\"\n}"
						}
					]
				},
				{
					"name": "Handle OAuth Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"tink_user_token\", jsonData.accessToken);",
									"    console.log(\"User token saved:\", jsonData.accessToken.substring(0, 20) + '...');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/api/bank/callback?code={{authorization_code}}",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"bank",
								"callback"
							],
							"query": [
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"description": "Authorization code returned by Tink"
								}
							]
						},
						"description": "Exchange authorization code for access token. This is called automatically after user authorizes."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{rootUrl}}/api/bank/callback?code=abc123xyz",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"bank",
										"callback"
									],
									"query": [
										{
											"key": "code",
											"value": "abc123xyz"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"Authorization successful\",\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expiresIn\": 3600,\n  \"refreshToken\": \"refresh_token_here\"\n}"
						}
					]
				},
				{
					"name": "Get Connected Accounts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tink_user_token}}",
								"description": "Use Tink user token (not API auth token)"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/bank/accounts",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"bank",
								"accounts"
							]
						},
						"description": "Retrieve all connected BBVA accounts. Requires Tink user access token from OAuth flow."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{tink_user_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/bank/accounts",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"bank",
										"accounts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"acc_123abc\",\n    \"name\": \"BBVA Cuenta Corriente\",\n    \"type\": \"CHECKING\",\n    \"identifiers\": {\n      \"iban\": {\n        \"iban\": \"ES9121000418450200051332\",\n        \"bban\": \"21000418450200051332\"\n      }\n    },\n    \"balances\": {\n      \"booked\": {\n        \"amount\": {\n          \"value\": 3456.78,\n          \"currencyCode\": \"EUR\"\n        }\n      }\n    },\n    \"financialInstitutionId\": \"es-bbva-oauth\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get All Transactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tink_user_token}}",
								"description": "Use Tink user token (not API auth token)"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/bank/transactions",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"bank",
								"transactions"
							]
						},
						"description": "Fetch all transactions from all connected BBVA accounts via Tink"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{tink_user_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/bank/transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"bank",
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"txn_001\",\n    \"accountId\": \"acc_123abc\",\n    \"amount\": {\n      \"value\": -45.50,\n      \"currencyCode\": \"EUR\"\n    },\n    \"descriptions\": {\n      \"original\": \"COMPRA MERCADONA\",\n      \"display\": \"Mercadona\"\n    },\n    \"dates\": {\n      \"booked\": \"2024-01-15\"\n    },\n    \"types\": {\n      \"type\": \"DEBIT\"\n    },\n    \"status\": \"BOOKED\",\n    \"merchantInformation\": {\n      \"merchantName\": \"Mercadona\"\n    }\n  },\n  {\n    \"id\": \"txn_002\",\n    \"accountId\": \"acc_123abc\",\n    \"amount\": {\n      \"value\": 2500.00,\n      \"currencyCode\": \"EUR\"\n    },\n    \"descriptions\": {\n      \"original\": \"NOMINA ENERO\",\n      \"display\": \"Nómina\"\n    },\n    \"dates\": {\n      \"booked\": \"2024-01-20\"\n    },\n    \"types\": {\n      \"type\": \"CREDIT\"\n    },\n    \"status\": \"BOOKED\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get Account Transactions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tink_user_token}}",
								"description": "Use Tink user token (not API auth token)"
							}
						],
						"url": {
							"raw": "{{rootUrl}}/api/bank/accounts/{{account_id}}/transactions",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"bank",
								"accounts",
								"{{account_id}}",
								"transactions"
							]
						},
						"description": "Fetch transactions for a specific BBVA account via Tink"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{tink_user_token}}"
									}
								],
								"url": {
									"raw": "{{rootUrl}}/api/bank/accounts/acc_123abc/transactions",
									"host": [
										"{{rootUrl}}"
									],
									"path": [
										"api",
										"bank",
										"accounts",
										"acc_123abc",
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"txn_001\",\n    \"accountId\": \"acc_123abc\",\n    \"amount\": {\n      \"value\": -45.50,\n      \"currencyCode\": \"EUR\"\n    },\n    \"descriptions\": {\n      \"original\": \"COMPRA MERCADONA\",\n      \"display\": \"Mercadona\"\n    },\n    \"dates\": {\n      \"booked\": \"2024-01-15\"\n    },\n    \"types\": {\n      \"type\": \"DEBIT\"\n    },\n    \"status\": \"BOOKED\"\n  }\n]"
						}
					]
				}
			],
			"description": "Bank integration via Tink API for open banking. Connect BBVA accounts and fetch transactions using OAuth 2.0 flow."
		},
		{
			"name": "API Documentation",
			"item": [
				{
					"name": "Get Swagger Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{rootUrl}}/api/docs",
							"host": [
								"{{rootUrl}}"
							],
							"path": [
								"api",
								"docs"
							]
						},
						"description": "Access the interactive Swagger API documentation"
					}
				}
			],
			"description": "API documentation and exploration"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "rootUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}